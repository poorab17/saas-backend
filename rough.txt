import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';
import LandingPage from './components/LandingPage';
import ModuleDetails from './components/ModuleDetails';
import Login from './components/Login';
import SuperAdmin from './dashboard/SuperAdmin';
import Tenant from './dashboard/Tenant';
import ModulesPage from './pages/ModulesPage';
import Customer from './dashboard/Customer';
import { useNavigate } from 'react-router-dom';
import CreateModuleForm from './pages/CreateModuleForm';

function App() {
  const navigate = useNavigate();
  const [user, setUser] = useState({
    isAuthenticated: false,
    role: null,
  });

  const location = useLocation();

  useEffect(() => {
    const storedRoute = localStorage.getItem('lastRoute');

    if (!user.isAuthenticated) {
      if (storedRoute) {
        // If the user is not authenticated and there's a stored route, navigate to it.
        navigate(storedRoute);
      }
    } else if (!location.pathname.startsWith('/login')) {
      // If the user is authenticated and not on the login page, store the current route.
      localStorage.setItem('lastRoute', location.pathname);
    }
  }, [user.isAuthenticated, location.pathname]);


  const handleSuccessfulLogin = (role) => {
    if (role) {
      setUser({
        isAuthenticated: true,
        role: role,
      });

      // Store the user's role in local storage
      localStorage.setItem('userRole', role);
      // Store the last route upon successful login
      if (!location.pathname.startsWith('/login')) {
        localStorage.setItem('lastRoute', location.pathname);
      }
    }
  }

  return (

    <Routes>
      <Route path="/" element={<LandingPage />} />
      <Route path="/login" element={<Login onSuccessfulLogin={handleSuccessfulLogin} />} />
      <Route path="/module/:moduleId" element={<ModuleDetails />} />
      <Route
        path="/superadmin"
        element={
          user.isAuthenticated && user.role === 'superadmin' ? (
            <SuperAdmin />
          ) : (
            <Navigate to="/login" />
          )
        }
      />
      <Route
        path="/tenant"
        element={
          user.isAuthenticated && user.role === 'tenant' ? (
            <Tenant />
          ) : (
            <Navigate to="/login" />
          )
        }
      />
      <Route
        path="/customer"
        element={
          user.isAuthenticated && user.role === 'customer' ? (
            <Customer />
          ) : (
            <Navigate to="/login" />
          )
        }
      />
      <Route path="/superadmin/modules" element={<ModulesPage></ModulesPage>}></Route>
      {/* <Route path="/superadmin/modules/create" element={<CreateModuleForm></CreateModuleForm>
      }></Route> */}


      <Route
        path="/superadmin/modules/create" // New route for module creation page
        element={
          user.isAuthenticated && user.role === 'superadmin' ? (
            <CreateModuleForm />
          ) : (
            <Navigate to="/login" />
          )
        }
      />
    </Routes>

  );
}

export default App;

To implement session management and ensure that the user is redirected to their desired page after successful login, as well as staying on the same page after a refresh, 